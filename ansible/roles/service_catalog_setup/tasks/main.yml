---
  - name: Docker pull {{ svc_cat_apiserver_img }}
    docker_image:
      name: "{{ svc_cat_apiserver_img }}"
    register: docker_pull_svc_cat_apiserver

  - name: Docker tag apiserver
    shell: docker tag {{ svc_cat_apiserver_img }} {{ svc_cat_apiserver_tag }}

  - name: Docker pull {{ svc_cat_controller_mgr_img }}
    docker_image:
      name: "{{ svc_cat_controller_mgr_img }}"
      tag: "{{ svc_cat_controller_mgr_tag }}"
    register: docker_pull_svc_cat

  - name: Docker tag service catalog controller
    shell: docker tag {{ svc_cat_controller_mgr_img }} {{ svc_cat_controller_mgr_tag }}

  - name: check if the service-catalog project exists
    shell: "{{ oc_cmd }} get project --no-headers=true | awk '{ print $1 }' | grep -E '^service-catalog( |$)' | cat"
    register: project

  - name: check if the service-catalog ssl secret exists
    shell: "{{ oc_cmd }} get secret -n service-catalog --no-headers=true | awk '{ print $1 }' | grep -E '^apiserver-ssl( |$)' | cat"
    register: secret

  - name: Create a new project for the service-catalog
    shell: "{{ oc_cmd }} new-project service-catalog"
    register: new_svc_cat_project
    when: project.stdout.find( "service-catalog" ) == -1

  #- name: Ensuring service-catalog project is selected for those cases of being re-run and skipping the new-project creation
  #  shell: "{{ oc_cmd }} project service-catalog"

  - name: check if the apiserver deployment exists
    shell: "{{ oc_cmd }} get deployment -n service-catalog --no-headers=true | awk '{ print $1}' | grep -E '^apiserver( |$)' | cat"
    register: deployment

  - name: Get SSL credentials
    shell: "cat {{ oc_host_config_dir }}/apiserver-fullchain.pem"
    register: apiserver_crt_plain
    when: use_ssl == True

  - name: Get SSL credentials
    shell: "cat {{ oc_host_config_dir }}/apiserver-privkey.pem"
    register: apiserver_key_plain
    when: use_ssl == True

  - name: Get SSL credentials for apiserver
    set_fact:
      apiserver_cert_b64: "{{ apiserver_crt_plain.stdout | b64encode }}"
    when: use_ssl == True

  - name: Get SSL credentials for apiserver
    set_fact:
      apiserver_key_b64: "{{ apiserver_key_plain.stdout | b64encode }}"
    when: use_ssl == True

  - name: Creating apiserver-ssl secret
    template:
      src: apiserver-ssl-secret.templ.yaml.j2
      dest: /tmp/apiserver-ssl-secret.yaml
    register: copy_ssl_secret_tmp
    when: new_svc_cat_project|succeeded and secret.stdout.find( "apiserver-ssl" ) == -1 and use_ssl == True

  - name: Creating service-catalog.templ.yaml
    template:
      src: service-catalog.templ.yaml.j2
      dest: /tmp/service-catalog.templ.yaml
    register: copy_svc_catalog_tmp
    when: deployment.stdout.find( "apiserver" ) == -1

  - name: Create apiserver ssl secret through OC Template
    shell: "{{ oc_cmd }} create -f /tmp/apiserver-ssl-secret.yaml"
    when: new_svc_cat_project|succeeded and secret.stdout.find( "apiserver-ssl" ) == -1 and use_ssl == True

  - name: Install Service Catalog through OC Template
    shell: "{{ oc_cmd }} process -f /tmp/service-catalog.templ.yaml | {{ oc_cmd }} create -f -"
    when: deployment.stdout.find( "apiserver" ) == -1

  - name: Waiting 10 minutes for API server pod to come up
    action:
      shell "{{ oc_cmd }}" get pods -n service-catalog | grep -qiEm1 "apiserver.*?running"
    register: wait_for_api_server_running
    until: wait_for_api_server_running.rc == 0
    retries: 60
    delay: 10

  # We would like to use the route, but had problems with integration
  # Keeping the route information here so we can revisit
  # Issues:
  # - We need to login, unsure what user/project to authenticate as
  # - SSL certs complained they didn't match the route name
  #

  - name: Wait for route for apiserver to be available
    shell: "'{{ oc_cmd }}' get route -n service-catalog --no-headers=true | grep -E '^apiserver( |$)' | cat"
    register: result_get_route_apiserver
    retries: 6
    delay: 10

  - name: Save route of apiserver
    shell: "{{ oc_cmd}} get route -n service-catalog --no-headers=true | awk '{print $2}'"
    register: result_service_catalog_endpoint

  - set_fact:
      service_catalog_endpoint:  "{{ result_service_catalog_endpoint.stdout }}"

  # Falling back to using the unauthenticated IP of the Pod/Port for now
  - name: Get IP of APIServer
    shell: "{{ oc_cmd }} -n service-catalog describe pod `{{ oc_cmd }} get pods -n service-catalog | grep apiserver | awk '{print $1}'` | grep IP | awk '{print $2}'"
    register: result_apiserver_ip
    retries: 6
    delay: 10

  - set_fact:
      service_catalog_api_server_ip:  "{{ result_apiserver_ip.stdout }}"
      svc_cat_kube_config: "{{ ansible_env.HOME }}/.kube/service-catalog.config"

  #- name: Creating .kube/service-catalog.config from kubeconfig.templ.yaml.j2
  #  template:
  #    src: kubeconfig.templ.yaml.j2
  #    dest: "{{ ansible_env.HOME }}/.kube/service-catalog.config"
  #    owner: "{{ ansible_env.USER }}"
      #group: "{{ ansible_env.USER }}"
  #    mode: 0644

  - name: Remove {{ svc_cat_kube_config }} if present
    file:
      path: "{{ svc_cat_kube_config }}"
      state: absent
    become: true

  - name: Create cluster entry in kube config for apiserver of service catalog
    shell: "{{ kubectl_cmd }} config set-cluster service-catalog-cluster --insecure-skip-tls-verify=true --server=https://{{ service_catalog_endpoint }} --kubeconfig={{ svc_cat_kube_config }}"

  - name: Create user credentials entry in kube config for apiserver of service catalog
    shell: "{{ kubectl_cmd }} config set-credentials admin/service-catalog-cluster --username=admin --password=admin --kubeconfig={{ svc_cat_kube_config }}"

  - name: Create context entry in kube config for apiserver of service catalog
    shell: "{{ kubectl_cmd }} config set-context default/service-catalog-cluster/admin --cluster service-catalog-cluster --user=admin/service-catalog-cluster --kubeconfig={{ svc_cat_kube_config }}"

  - name: Create context entry in kube config for apiserver of service catalog
    shell: "{{ kubectl_cmd }} config use-context default/service-catalog-cluster/admin --kubeconfig={{ svc_cat_kube_config }}"

  - lineinfile: dest={{ ansible_env.HOME }}/.bashrc line="{{ item }}" create=yes
    with_items:
      - alias catctl="kubectl --kubeconfig={{ svc_cat_kube_config }}"
